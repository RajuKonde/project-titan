# OpenAPI Specification version 3.0.0
openapi: 3.0.0

# 1. Basic Information about our API
info:
  title: "Project Titan - Log Analytics API"
  description: "API for ingesting and querying application logs."
  version: "1.0.0"

# 2. Server URL (can be updated for production later)
servers:
  - url: "http://localhost:8080"
    description: "Local development server"

# 3. API Paths (The Endpoints)
paths:
  # Endpoint for ingesting a new log
  /api/v1/logs:
    post:
      summary: "Ingest a new log entry"
      description: "Receives and stores a single log entry."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogEntry' # Points to the data model below
      responses:
        '201': # 'Created' - The standard success response for a POST request
          description: "Log entry successfully created."
          
    # Endpoint for retrieving logs
    get:
      summary: "Retrieve recent log entries"
      description: "Fetches the 50 most recent log entries."
      responses:
        '200': # 'OK' - The standard success response for a GET request
          description: "A list of recent logs."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log' # Returns an array of Log objects

# 4. Reusable Components (Data Models/Schemas)
components:
  schemas:
    # Schema for INCOMING logs (what the client sends us)
    LogEntry:
      type: object
      properties:
        service:
          type: string
          example: "payment-service"
        level:
          type: string
          example: "ERROR"
        message:
          type: string
          example: "Failed to connect to the database."
      required:
        - service
        - level
        - message

    # Schema for OUTGOING logs (what we send back to the client)
    Log:
      type: object
      properties:
        id:
          type: string
          example: "a1b2c3d4-e5f6-..."
        timestamp:
          type: string
          format: date-time
          example: "2025-08-26T10:50:00Z"
        service:
          type: string
          example: "payment-service"
        level:
          type: string
          example: "ERROR"
        message:
          type: string
          example: "Failed to connect to the database."